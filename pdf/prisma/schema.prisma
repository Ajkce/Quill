// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid()) @map("_id")
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Message {
  id   String @id @default(cuid()) @map("_id")
  text String @db.String()

  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  File   File?   @relation(fields: [fileId], references: [id])
  fileId String?
}
